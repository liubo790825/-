using LeaRun.Application.Entity.CollegeMIS;
using LeaRun.Application.IService.CollegeMIS;
using LeaRun.Data.Repository;
using LeaRun.Util.WebControl;
using LeaRun.Util.Extension;
using System.Collections.Generic;
using System.Linq;
using LeaRun.Application.Code;
using LeaRun.Util;

namespace LeaRun.Application.Service.CollegeMIS
{
    /// <summary>
    /// 版 本 6.1
    /// Copyright (c) 2013-2016 北京泉江科技有限公司
    /// 创 建：admin
    /// 日 期：2017-07-19 16:33
    /// 描 述：报到流程授权表
    /// </summary>
    public class BK_AuthorizeNewStuRegFlowService : RepositoryFactory<BK_AuthorizeNewStuRegFlowEntity>, BK_AuthorizeNewStuRegFlowIService
    {
        #region 获取数据
        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="pagination">分页</param>
        /// <param name="queryJson">查询参数</param>
        /// <returns>返回分页列表</returns>
        public IEnumerable<BK_AuthorizeNewStuRegFlowEntity> GetPageList(string conn, Pagination pagination, string queryJson)
        {
           

            var expression = LinqExtensions.True<BK_AuthorizeNewStuRegFlowEntity>();
            //参考代码
            /*var queryParam = queryJson.ToJObject();
            if (!queryParam["字段1"].IsEmpty()){
                string FullHead = queryParam["字段1"].ToString();
                expression = expression.And(t => t.字段1.Contains(字段1));
            }*/
            //如果有字段2，字段3也这样写...
            expression = expression.And(t => t.EnabledMark==1);
             return this.BaseRepository(conn).FindList(expression,pagination);
        }
        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="queryJson">查询参数</param>
        /// <returns>返回列表</returns>
        public IEnumerable<BK_AuthorizeNewStuRegFlowEntity> GetList(string conn, string queryJson)
        {
            string username = OperatorProvider.Provider.Current().UserName;//得到当前用户的名称
            string userid = OperatorProvider.Provider.Current().UserId;//得到当前用户的ID号
            var expression = LinqExtensions.True<BK_AuthorizeNewStuRegFlowEntity>();
            //参考代码
            var queryParam = queryJson.ToJObject();
            if (!queryParam["FlowId"].IsEmpty()){
                string FlowId = queryParam["FlowId"].ToString();
                expression = expression.And(t => t.FlowId.Contains(FlowId));
            }
            if (userid != "System")
            {
                expression = expression.And(t => t.UserId == userid);
            }
            expression = expression.And(t => t.EnabledMark == 1);
            return this.BaseRepository(conn).FindList(expression).ToList();
        }
        /// <summary>
        /// 获取实体
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <returns></returns>
        public BK_AuthorizeNewStuRegFlowEntity GetEntity(string conn, string keyValue)
        {
            return this.BaseRepository(conn).FindEntity(keyValue);
        }
        #endregion

        #region 提交数据
        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="keyValue">主键</param>
        public void RemoveForm(string conn, string keyValue)
        {
            this.BaseRepository(conn).Delete(keyValue);
        }
        /// <summary>
        /// 保存表单（新增、修改）
        /// </summary>
        /// <param name="keyValue">主键值</param>
        /// <param name="entity">实体对象</param>
        /// <returns></returns>
        public void SaveForm(string conn, string keyValue, BK_AuthorizeNewStuRegFlowEntity entity)
        {
            if (!string.IsNullOrEmpty(keyValue))
            {
                entity.Modify(keyValue);
                this.BaseRepository(conn).Update(entity);
            }
            else
            {
                entity.Create();
                this.BaseRepository(conn).Insert(entity);
            }
        }
        #endregion
    }
}
